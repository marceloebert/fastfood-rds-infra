name: Terraform CI/CD

on:
  push:
    branches:
      - main  # Executa o pipeline quando há push na branch main

jobs:
  terraform:
    name: 'Terraform Pipeline'
    runs-on: ubuntu-latest  # Ambiente de execução
    environment: # Define a configuração de ambiente
      name: AWS

    env:      
      TF_WORKING_DIR: ./                    # Diretório com os arquivos Terraform
      TF_IN_AUTOMATION: "true"              # Evita comportamento interativo no Terraform

    steps:
      # 1. Checkout do código
      - name: Checkout Code
        uses: actions/checkout@v3

        # Configura credenciais AWS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      # 3. Instalação do Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.8.0

      # 4. Inicialização do Terraform (com force-copy para evitar prompts)
      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init -input=false -force-copy

      # 5. Validação do código Terraform
      - name: Terraform Validate
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform validate

      # 6. Geração do plano Terraform
      - name: Terraform Plan
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform plan -out=tfplan

      # 7. Aplicação do plano Terraform (somente na branch main)
      - name: Terraform Apply
        working-directory: ${{ env.TF_WORKING_DIR }}
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve tfplan
